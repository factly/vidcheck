version: "3.7"

services:
  ###########################################################################
  #######                       DB SERVICES                           #######
  ###########################################################################
  postgres:
    image: postgres:11.7-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
      - ~/factly/vidcheck/postgresql:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=kratos,keto,kavach,vidcheck
    networks:
      - intranet

  ###########################################################################
  #######                        MINIO                                #######
  ###########################################################################
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
    volumes:
      - ~/factly/vidcheck/minio/data:/export
      - ~/factly/vidcheck/minio/config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=miniokey
      - MINIO_SECRET_KEY=miniosecret
    networks:
      - intranet
    command: server /export

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    networks:
      - intranet
    entrypoint: >
      /bin/sh -c "
      apk add --no-cache bash;
      wait-for-it.sh minio:9000 -- echo 'Minio is up. Creating the bucket!!';
      /usr/bin/mc config host add myminio http://minio:9000 miniokey miniosecret;
      /usr/bin/mc mb myminio/vidcheck;
      /usr/bin/mc policy set download myminio/vidcheck;
      exit 0;
      "


  ###########################################################################
  #######                         IMGPROXY                            #######
  ###########################################################################
  imgproxy:
    image: darthsim/imgproxy:v2.15.0
    ports:
      - 8080:8080
    environment:
      - IMGPROXY_BASE_URL=http://minio:9000/
      - IMGPROXY_TTL=31536000
    networks:
      - intranet

  ###########################################################################
  #######                         IFRAMELY                            #######
  ###########################################################################
  iframely:
    image: factly/iframely:v1.5.0-102820
    ports:
      - "8061:8061" 
    volumes:
      - ./iframely/config.local.js:/iframely/config.local.js
    networks:
      - intranet

  ###########################################################################
  #######                            NGINX                            #######
  ###########################################################################
  nginx:
    image: nginx:1.19.0-alpine
    ports:
      - 7001:80
    volumes:
      - ./nginx:/etc/nginx/conf.d
    restart: unless-stopped
    depends_on:
      - imgproxy
    networks:
      - intranet

  ###########################################################################
  #######             UPLOAD SERVICES                                 #######
  ###########################################################################
  companion:
    image: transloadit/companion:latest
    ports:
      - "3020:3020"
    env_file:
      - ./companion/.env

  ###########################################################################
  #######               KRATOS AND OATHKEEPER                         #######
  ###########################################################################
  keto-migrate:
    image: oryd/keto:latest
    environment:
      - LOG_LEVEL=debug
    depends_on:
      - postgres
    command: migrate sql postgres://postgres:postgres@postgres:5432/keto?sslmode=disable
    restart: on-failure
    networks:
      - intranet

  keto:
    image: oryd/keto:latest
    ports:
      - "4466:4466"
    depends_on:
      - keto-migrate
    environment:
      - DSN=postgres://postgres:postgres@postgres:5432/keto?sslmode=disable
    networks:
      - intranet

  kratos-migrate:
    depends_on:
      - postgres
    image: oryd/kratos:v0.5.0-alpha.1-sqlite
    environment:
      - DSN=postgres://postgres:postgres@postgres:5432/kratos?sslmode=disable
    volumes:
      - type: bind
        source: ./kratos/sqlite
        target: /home/ory/sqlite
      - type: bind
        source: ./kratos/config
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - intranet

  kratos:
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v0.5.0-alpha.1-sqlite
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    environment:
      - DSN=postgres://postgres:postgres@postgres:5432/kratos?sslmode=disable
    volumes:
      - type: bind
        source: ./kratos/sqlite
        target: /home/ory/sqlite
      - type: bind
        source: ./kratos/config
        target: /etc/config/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev
    restart: unless-stopped
    networks:
      - intranet

  oathkeeper:
    image: oryd/oathkeeper:latest-alpine
    depends_on:
      - kratos
    ports:
      - "4455:4455"
      - "4456:4456"
    environment:
      - LOG_LEVEL=debug
    volumes:
      - type: bind
        source: ./oathkeeper
        target: /etc/config/oathkeeper
    command: serve proxy -c "/etc/config/oathkeeper/.oathkeeper.yml"
    restart: on-failure
    networks:
      - intranet

  ###########################################################################
  #######             KAVACH                                          #######
  ###########################################################################
  kavach-server:
    depends_on:
      - postgres
      - keto
      - kratos
      - kavach-migrate
    ports:
      - 5000:8000
    build:
      context: ./kavach/kavach-server
      dockerfile: Dockerfile.dev
    environment:
      - CONFIG_FILE=kavach-server.yml
      - WAIT_HOSTS=postgres:5432, kratos:4434 , keto:4466
    volumes:
      - type: bind
        source: ./kavach/kavach-server
        target: /app
    restart: always
    networks:
      - intranet
  
  kavach-migrate:
    depends_on:
      - postgres
      - keto
      - kratos
    build:
      context: ./kavach/kavach-server
      dockerfile: Dockerfile.migrate
    environment:
      - WAIT_HOSTS=postgres:5432, kratos:4434 , keto:4466
    volumes:
      - type: bind
        source: ./kavach/kavach-server
        target: /app
    networks:
      - intranet

  kavach-web:
    build:
      context: ./kavach/kavach-web
      dockerfile: Dockerfile
    environment:
      - PUBLIC_URL=http://127.0.0.1:4455/.factly/kavach/web
      - REACT_APP_DEGA_PUBLIC_URL=http://127.0.0.1:4455/.factly/dega/studio
      - REACT_APP_BINDU_PUBLIC_URL=http://127.0.0.1:4455/.factly/bindu/studio
    volumes:
      - type: bind
        source: ./kavach/kavach-web
        target: /app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - intranet

  ###########################################################################
  #######                       VID CHECK                             #######
  ###########################################################################
  vid-check-server:
    depends_on:
      - postgres
    ports:
      - 7740:8000
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    environment:
      - WAIT_HOSTS=postgres:5432
    restart: unless-stopped
    volumes:
      - ./server:/app
    networks:
      - intranet

  vid-check-migrate:
    depends_on:
      - postgres
    build:
      context: ./server
      dockerfile: Dockerfile.migrate
    environment:
      - WAIT_HOSTS=postgres:5432
    volumes:
      - ./server:/app
    networks:
      - intranet

  vid-check-web:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - ./client:/app
      - /app/node_modules/
    ports:
      - 3000:3000
    environment:
      - PUBLIC_URL=http://127.0.0.1:4455/.factly/vid-check/web
      - REACT_APP_API_URL=http://127.0.0.1:4455/.factly/vid-check/server
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    networks:
      - intranet

networks:
  intranet:
